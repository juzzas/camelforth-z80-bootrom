HEXLOAD
:10F80000C30DF9C309F8C314F8EF6069CD1DF94FB2
:10F810000600E7C9CD01F9B7280501FFFFE7C901D7
:10F820000000E7C95D541B7AB3280821A11CCD391B
:10F83000F818F321961CC339F80173FF0901E9FF99
:10F840000938FD7DC60F3006FE083803F600231F79
:10F850003801001F3002F6001FD0C93EFE3238FAD0
:10F86000D330C9C506084FCB2138113A38FAE6FC27
:10F87000D3303CD3303DD33010EDC1C93A38FAF61D
:10F8800002D3303CD3303DD33010DCC1C9C50608AB
:10F890000E00CB213A38FAF603D330DB30E60128EC
:10F8A0000479F6014F3A38FAE6FCF602D33010E25A
:10F8B00079C1C93A38FAE67F3238FAD330C93A38D2
:10F8C000FAF6803238FAD330C93A38FAE6FB3238E1
:10F8D000FAD330C93A38FAF6043238FAD330C9DBF1
:10F8E00030E680C9DB30E68020FAC9DB30E680C82C
:10F8F0007AB337C8210100C5D5CD24F8D1C11B1872
:10F90000EADB30E64028033E00C93E01C9C35BF88C
:10F910001E007BAE5F230B78B120F77BC9E5DDE1EC
:10F9200011CCF9EDA0EDA0EDA0EDA0DDE5E1010425
:10F9300000D5CD10F9D112CDB3F8DD560DDD5E0C3A
:10F94000CDEBF8DABAF921CCF9010500CDD1F9CD2A
:10F95000E4F8CDC9F8CD8DF808CDD4F808FE41C241
:10F96000C6F9DD4607DD4E0678B1281FCDE4F8DD87
:10F970006605DD6E04CDD1F9CDE4F8CDC9F8CD8DA5
:10F98000F808CDD4F808FE41C2C6F9DD460BDD4EBD
:10F990000A78B1280CCDE4F8DD6609DD6E08CD03E8
:10F9A000FACDE4F8CDC9F8CD8DF808CDD4F808FE2D
:10F9B00043C2C0F9CDBEF83E00C9CDBEF83E04C971
:10F9C000CDBEF83E06C9CDBEF83E05C90000000018
:10F9D000A579E6C0B02819C5014000CDF0F9EBE1EA
:10F9E000014000ED42444DEBCDE4F879B020E2C98E
:10F9F000CDC9F878B128087ECD63F8230B18F4CD73
:10FA0000D4F8C979B0C879E6C0B02819C50140005A
:10FA1000CD25FAEBE1014000ED42444DEBCDE4F899
:10FA200079B020DFC9CDC9F878B12808CD8DF87735
:09FA3000230B18F4CDD4F8C90031
:00000001FF



VOCABULARY FUJINET

ONLY FORTH ALSO FUJINET DEFINITIONS


HEX

: DOFIELD  ( the action of a field  )
DOES>       ( addr1 -- addr2 ; calculate address of field )
    @ + ;

: FIELD  ( # n -- #'    define a field with offset # and size n )
    CREATE OVER , +    ( store offset, add the size to find new offset )
    DOFIELD ;          ( set the action of the newly created field )

: .(
    [CHAR] ) WORD COUNT TYPE  ; IMMEDIATE

0
1 CHARS FIELD DCB.DEV         ( uint8_t device; )
1 CHARS FIELD DCB.CMD         ( uint8_t command; )
1 CHARS FIELD DCB.AUX1        ( uint8_t aux1; )
1 CHARS FIELD DCB.AUX2        ( uint8_t aux2; )
2 CHARS FIELD DCB.BUFFER      ( uint8_t *buffer; )
2 CHARS FIELD DCB.#BUFFER     ( uint16_t buffer_bytes; // data length in bytes )
2 CHARS FIELD DCB.RESPONSE    ( uint8_t *response; )
2 CHARS FIELD DCB.#RESPONSE   ( uint16_t response_bytes; // data length in bytes )
2 CHARS FIELD DCB.TIMEOUT     ( uint16_t timeout;   // milliseconds )
CONSTANT #FUJINET_DCB


: /FUJINET                          ( initialises the fujinet )
   F800 CALL  ;

: FUJINET_DCB     ( dcb -- rc   execute a FujiNet DCB command )
   F803 CALL  ;

: FUJINET_POLL       ( -- f   poll the FujiNet PROCEED signal )
   F806 CALL  ;

: NEW_DCB        ( "name"   -- dcb   create a new FujiNet DCB )
   CREATE #FUJINET_DCB CHARS ALLOT   ;

: /FNDCB      ( dev cmd dcb   --   initialise a FujiNet DCB )
   DUP >R #FUJINET_DCB ERASE
   R@ DCB.CMD C!
   R@ DCB.DEV C!
   400 R> DCB.TIMEOUT !
   ;

NEW_DCB dcb

70 CONSTANT DEVICEID_FUJINET
31 CONSTANT DEVICEID_DISK
20 CONSTANT #HOSTSLOTLEN
8 CONSTANT #HOSTS

#HOSTSLOTLEN #HOSTS * CONSTANT #HOSTS_BUF 
CREATE HOSTS_BUF #HOSTS_BUF ALLOT

24 CONSTANT #FILENAME 
8 CONSTANT #DEVS

200 CONSTANT #FNBUFFER
CREATE FNBUFFER #FNBUFFER ALLOT

0
1 CHARS FIELD DEVSLOT.HOSTSLOT            ( uint8_t hostSlot )
1 CHARS FIELD DEVSLOT.MODE                ( uint8_t aux1; )
#FILENAME CHARS FIELD DEVSLOT.FILENAME    ( uint8_t filename[FILE_MAXLEN] )
CONSTANT #DEVSLOT

#DEVSLOT #DEVS * CONSTANT #DEVS_BUF 
CREATE DEVS_BUF #DEVS_BUF ALLOT

: FNRESET
   DEVICEID_FUJINET FF dcb /FNDCB
   dcb FUJINET_DCB   ;

: FNHOSTS@
   DEVICEID_FUJINET F4 dcb /FNDCB
   HOSTS_BUF dcb DCB.RESPONSE !
   #HOSTS_BUF dcb DCB.#RESPONSE !
   dcb FUJINET_DCB   ;

: FNDEVS@
   DEVICEID_FUJINET F2 dcb /FNDCB
   DEVS_BUF dcb DCB.RESPONSE !
   #DEVS_BUF dcb DCB.#RESPONSE !
   dcb FUJINET_DCB   ;

1 CONSTANT FNMODE_READ
2 CONSTANT FNMODE_WRITE

: FNDISK-MOUNT    ( disk-slot mode -- rc )
   DEVICEID_FUJINET F8 dcb /FNDCB
   dcb DCB.AUX2 C!
   dcb DCB.AUX1 C!
   dcb FUJINET_DCB   ;

: FNDISK-MOUNTALL    ( -- rc )
   DEVICEID_FUJINET D7 dcb /FNDCB
   dcb FUJINET_DCB
   ." return from FNDISK-MOUNTALL: " .S CR
   ;

: FNDISK-UMOUNT    ( disk-slot -- rc )
   DEVICEID_FUJINET E9 dcb /FNDCB
   dcb DCB.AUX1 !
   dcb FUJINET_DCB   ;

: FNDISK-READ    ( disk-slot sector buffer -- rc )
   ROT DEVICEID_DISK + [CHAR] R dcb /FNDCB
   SWAP DUP FF AND dcb DCB.AUX1 C!
   8 RSHIFT FF AND dcb DCB.AUX2 C!
   dcb DCB.RESPONSE !
   200 dcb DCB.#RESPONSE !
   dcb FUJINET_DCB   ;

: FNDISK-WRITE    ( disk-slot sector buffer -- rc )
   ROT DEVICEID_DISK + [CHAR] W dcb /FNDCB
   SWAP DUP FF AND dcb DCB.AUX1 C!
   8 RSHIFT FF AND dcb DCB.AUX2 C!
   dcb DCB.BUFFER !
   200 dcb DCB.#BUFFER !
   dcb FUJINET_DCB   ;

: FNDISK-SIZE    ( disk-slot -- ud rc )
   DEVICEID_DISK + [CHAR] Z dcb /FNDCB
   FNBUFFER dcb DCB.RESPONSE !
   4 dcb DCB.#RESPONSE !
   dcb FUJINET_DCB
   ." return from FNDISK-SIZE: " .S CR
   DUP 0= IF
   ." return from FNDISK-SIZE(2a): " .S CR
     FNBUFFER @
     FNBUFFER CELL+ @
   ." return from FNDISK-SIZE(2b): " .S CR
     ROT
   THEN   ;

: FNBLOCK-READ   ( dsk blk buffer -- f )
    ROT DUP >R
    ROT DUP >R
    ROT DUP >R  ( dsk blk buffer  r: dsk blk buffer )

    SWAP 2* SWAP
    FNDISK-READ 0= INVERT IF ABORT" FNREAD ERROR" THEN

    R> R> R> SWAP ROT
    SWAP 2* 1+ SWAP 200 +
    FNDISK-READ 0= INVERT  IF ABORT" FNREAD ERROR" THEN
    -1  ;

: FNBLOCK-WRITE   ( dsk blk buffer -- f )
    ROT DUP >R
    ROT DUP >R
    ROT DUP >R  ( dsk blk buffer  r: dsk blk buffer )

    SWAP 2* SWAP
    FNDISK-WRITE 0= INVERT IF ABORT" FNWRITE ERROR" THEN

    R> R> R> SWAP ROT
    SWAP 2* 1+ SWAP 200 +
    FNDISK-WRITE 0= INVERT  IF ABORT" FNWRITE ERROR" THEN
    -1  ;


/FUJINET
FNDISK-MOUNTALL    DROP
' FNBLOCK-READ  BLKREADVEC  !
' FNBLOCK-WRITE BLKWRITEVEC !

( 8000 DSK ! )
( 1 BLOCK )
.S
1 FNDISK-SIZE .S
